group_by(gender) %>%
summarise(count = n(), .groups = 'drop') %>%
mutate(percentage = count / sum(count) * 100)
})
print(resultados_genero_por_tipo)
# Preparar los datos para graficar
plot_data_list <- lapply(names(resultados_genero_por_tipo), function(election_type) {
resultados_genero_por_tipo[[election_type]] %>%
mutate(election_type = election_type)
}) %>%
bind_rows()
# Crear el gráfico de barras
ggplot(plot_data_list, aes(x = election_type, y = percentage, fill = gender)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(
title = "Porcentaje de Género por Tipo de Elección",
x = "Tipo de Elección",
y = "Porcentaje",
fill = "Género"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(election.type.2)
election_type_order <- c("election_type_2", "election_type_7", "election_type_8", "election_type_13", "election_type_20", "election_type_21", "election_type_24")
election_type_labels <- c("Gobernador(a)", "Legislador(a) Nominal", "Legislador(a) Lista", "Legislador(a) Indígena", "Diputado(a) Nominal", "Diputado(a) Lista", "Diputado(a) Indígena")
# Asegurarse de que los datos estén en el orden correcto y con las etiquetas correctas
plot_data_list$election_type <- factor(plot_data_list$election_type, levels = election_type_order, labels = election_type_labels)
# Crear el gráfico de barras
ggplot(plot_data_list, aes(x = election_type, y = percentage, fill = gender)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(
title = "Porcentaje de Género por Tipo de Elección",
x = "Tipo de Elección",
y = "Porcentaje",
fill = "Género"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Crear el gráfico de barras
ggplot(plot_data_list, aes(x = election_type, y = percentage, fill = gender)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(
title = "Porcentaje de Género por Tipo de Elección",
x = "",
y = "Porcentaje (%)",
fill = "Género"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 2. Filtrar por election_type_id = 7
election_7_data <- eanr2025 %>%
filter(election_type_id == 7)
# 3. Contar candidatos por estado, género y list_order
conteo_candidatos <- election_7_data %>%
group_by(state_description, gender, list_order) %>%
summarise(cantidad = n(), .groups = 'drop') %>%
group_by(state_description, list_order) %>%
mutate(porcentaje = cantidad / sum(cantidad) * 100) %>%
ungroup()
# 4. Preparar los datos para el gráfico (opcional, pero recomendado para ggplot2)
#  En este caso, los datos ya están en un formato adecuado para graficar barras apiladas o agrupadas.
# 5.  Crear el gráfico de barras
ggplot(conteo_candidatos, aes(x = state_description, y = porcentaje, fill = gender)) +
geom_bar(stat = "identity", position = "dodge") + # o "stack" para barras apiladas
facet_wrap(~list_order, labeller = labeller(list_order = c("1" = "Principal", "2" = "Suplente"))) +
labs(
title = "Porcentaje de Género por Estado y Condición (Principal/Suplente) para Elección Tipo 7",
x = "Estado",
y = "Porcentaje",
fill = "Género"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Guardar el gráfico (opcional)
# ggsave("gender_percentage_by_state_election_type_7.png", width = 12, height = 8)
ggplot(conteo_candidatos, aes(x = state_description, y = porcentaje, fill = gender)) +
geom_bar(stat = "identity", position = "stack") + # o "stack" para barras apiladas
facet_wrap(~list_order, labeller = labeller(list_order = c("1" = "Principal", "2" = "Suplente"))) +
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(
title = "Porcentaje de Género por Estado y Condición (Principal/Suplente) para Elección Tipo 7",
x = "",
y = "Porcentaje",
fill = "Género"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(conteo_candidatos, aes(x = state_description, y = porcentaje, fill = gender)) +
geom_bar(stat = "identity", position = "stack") + # o "stack" para barras apiladas
facet_wrap(~list_order, labeller = labeller(list_order = c("1" = "Principal", "2" = "Suplente"))) +
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(
title = "Porcentaje de Género por Estado y posición para la elección a Legislador(a) Nominal",
x = "",
y = "Porcentaje",
fill = "Género"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
election_13_data <- eanr2025 %>%
filter(election_type_id == 13)
# 3. Contar candidatos por estado, género y list_order
conteo_candidatos <- election_13_data %>%
group_by(state_description, gender, list_order) %>%
summarise(cantidad = n(), .groups = 'drop') %>%
group_by(state_description, list_order) %>%
mutate(porcentaje = cantidad / sum(cantidad) * 100) %>%
ungroup()
# 4. Preparar los datos para el gráfico (opcional, pero recomendado para ggplot2)
#  En este caso, los datos ya están en un formato adecuado para graficar barras apiladas o agrupadas.
# 5.  Crear el gráfico de barras
ggplot(conteo_candidatos, aes(x = state_description, y = porcentaje, fill = gender)) +
geom_bar(stat = "identity", position = "stack") + # o "stack" para barras apiladas
facet_wrap(~list_order, labeller = labeller(list_order = c("1" = "Principal", "2" = "Suplente"))) +
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(
title = "Porcentaje de Género por Estado y posición para la elección a Legislador(a) Indígena",
x = "",
y = "Porcentaje",
fill = "Género"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 2. Filtrar por election_type_id = 20
election_20_data <- eanr2025 %>%
filter(election_type_id == 20)
# 3. Contar candidatos por estado, género y list_order
conteo_candidatos <- election_20_data %>%
group_by(state_description, gender, list_order) %>%
summarise(cantidad = n(), .groups = 'drop') %>%
group_by(state_description, list_order) %>%
mutate(porcentaje = cantidad / sum(cantidad) * 100) %>%
ungroup()
# 4. Preparar los datos para el gráfico (opcional, pero recomendado para ggplot2)
#  En este caso, los datos ya están en un formato adecuado para graficar barras apiladas o agrupadas.
# 5.  Crear el gráfico de barras
ggplot(conteo_candidatos, aes(x = state_description, y = porcentaje, fill = gender)) +
geom_bar(stat = "identity", position = "stack") + # o "stack" para barras apiladas
facet_wrap(~list_order, labeller = labeller(list_order = c("1" = "Principal", "2" = "Suplente"))) +
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(
title = "Porcentaje de Género por Estado y posición para la elección a Diputado(a) Nominal",
x = "",
y = "Porcentaje",
fill = "Género"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Guardar el gráfico (opcional)
# ggsave("gender_percentage_by_state_election_type_20.png", width = 12, height = 8)
# Guardar el gráfico (opcional)
# ggsave("gender_percentage_by_state_election_type_20.png", width = 12, height = 8)
# 2. Filtrar por election_type_id = 24
election_24_data <- eanr2025 %>%
filter(election_type_id == 24)
# 3. Contar candidatos por estado, género y list_order
conteo_candidatos <- election_24_data %>%
group_by(state_description, gender, list_order) %>%
summarise(cantidad = n(), .groups = 'drop') %>%
group_by(state_description, list_order) %>%
mutate(porcentaje = cantidad / sum(cantidad) * 100) %>%
ungroup()
# 4. Preparar los datos para el gráfico (opcional, pero recomendado para ggplot2)
#  En este caso, los datos ya están en un formato adecuado para graficar barras apiladas o agrupadas.
# 5.  Crear el gráfico de barras
ggplot(conteo_candidatos, aes(x = state_description, y = porcentaje, fill = gender)) +
geom_bar(stat = "identity", position = "stack") + # o "stack" para barras apiladas
facet_wrap(~list_order, labeller = labeller(list_order = c("1" = "Principal", "2" = "Suplente"))) +
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(
title = "Porcentaje de Género por Estado y posición para la elección a Diputado(a) Indígena",
x = "",
y = "Porcentaje",
fill = "Género"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Guardar el gráfico (opcional)
# ggsave("gender_percentage_by_state_election_type_24.png", width = 12, height = 8)
View(election_24_data)
View(eanr2025)
# 3. Contar candidatos por circunscripcion, género y list_order
conteo_candidatos <- election_24_data %>%
group_by(cod_circunscription, gender, list_order) %>%
summarise(cantidad = n(), .groups = 'drop') %>%
group_by(cod_circunscriptio, list_order) %>%
mutate(porcentaje = cantidad / sum(cantidad) * 100) %>%
ungroup()
# 3. Contar candidatos por circunscripcion, género y list_order
conteo_candidatos <- election_24_data %>%
group_by(cod_circunscription, gender, list_order) %>%
summarise(cantidad = n(), .groups = 'drop') %>%
group_by(cod_circunscription, list_order) %>%
mutate(porcentaje = cantidad / sum(cantidad) * 100) %>%
ungroup()
# 4. Preparar los datos para el gráfico (opcional, pero recomendado para ggplot2)
#  En este caso, los datos ya están en un formato adecuado para graficar barras apiladas o agrupadas.
# 5.  Crear el gráfico de barras
ggplot(conteo_candidatos, aes(x = state_description, y = porcentaje, fill = gender)) +
geom_bar(stat = "identity", position = "stack") + # o "stack" para barras apiladas
facet_wrap(~list_order, labeller = labeller(list_order = c("1" = "Principal", "2" = "Suplente"))) +
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(
title = "Porcentaje de Género por Estado y posición para la elección a Diputado(a) Indígena",
x = "",
y = "Porcentaje",
fill = "Género"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 2. Filtrar por election_type_id = 24
election_24_data <- eanr2025 %>%
filter(election_type_id == 24)
# 3. Contar candidatos por circunscripcion, género y list_order
conteo_candidatos <- election_24_data %>%
group_by(cod_circunscription, gender, list_order) %>%
summarise(cantidad = n(), .groups = 'drop') %>%
group_by(cod_circunscription, list_order) %>%
mutate(porcentaje = cantidad / sum(cantidad) * 100) %>%
ungroup()
# 4. Preparar los datos para el gráfico (opcional, pero recomendado para ggplot2)
#  En este caso, los datos ya están en un formato adecuado para graficar barras apiladas o agrupadas.
# 5.  Crear el gráfico de barras
ggplot(conteo_candidatos, aes(x = cod_description, y = porcentaje, fill = gender)) +
geom_bar(stat = "identity", position = "stack") + # o "stack" para barras apiladas
facet_wrap(~list_order, labeller = labeller(list_order = c("1" = "Principal", "2" = "Suplente"))) +
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(
title = "Porcentaje de Género por Circunscripción y posición para la elección a Diputado(a) Indígena",
x = "Cirscunscripción",
y = "Porcentaje",
fill = "Género"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 2. Filtrar por election_type_id = 24
election_24_data <- eanr2025 %>%
filter(election_type_id == 24)
# 3. Contar candidatos por circunscripcion, género y list_order
conteo_candidatos <- election_24_data %>%
group_by(cod_circunscription, gender, list_order) %>%
summarise(cantidad = n(), .groups = 'drop') %>%
group_by(cod_circunscription, list_order) %>%
mutate(porcentaje = cantidad / sum(cantidad) * 100) %>%
ungroup()
# 4. Preparar los datos para el gráfico (opcional, pero recomendado para ggplot2)
#  En este caso, los datos ya están en un formato adecuado para graficar barras apiladas o agrupadas.
# 5.  Crear el gráfico de barras
ggplot(conteo_candidatos, aes(x = cod_circunscription, y = porcentaje, fill = gender)) +
geom_bar(stat = "identity", position = "stack") + # o "stack" para barras apiladas
facet_wrap(~list_order, labeller = labeller(list_order = c("1" = "Principal", "2" = "Suplente"))) +
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(
title = "Porcentaje de Género por Circunscripción y posición para la elección a Diputado(a) Indígena",
x = "Cirscunscripción",
y = "Porcentaje",
fill = "Género"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Guardar el gráfico (opcional)
# ggsave("gender_percentage_by_state_election_type_24.png", width = 12, height = 8)
View(election.type.8)
# Filtrar por election_type_id = 8
election_8_data <- eanr2025 %>%
filter(election_type_id == 8)
# 3. Crear los boxplots
ggplot(election_8_data, aes(x = state_description, y = list_order, fill = gender)) +
geom_boxplot() +
labs(
title = "Distribución de Orden de Lista por Estado y Género (Elección Tipo 8)",
x = "Estado",
y = "Orden de Lista",
fill = "Género"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Guardar el gráfico (opcional)
# ggsave("list_order_boxplots_election_type_8.png", width = 12, height = 8)
# 3. Crear los boxplots
ggplot(election_8_data, aes(x = state_description, y = list_order, fill = gender)) +
geom_boxplot() +
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(
title = "Distribución de candidatos en las listas a Legislador(a)",
x = "Estado",
y = "Posición en la lista",
fill = "Género"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Filtrar por election_type_id = 21
election_21_data <- eanr2025 %>%
filter(election_type_id == 21)
# 3. Crear los boxplots
ggplot(election_21_data, aes(x = state_description, y = list_order, fill = gender)) +
geom_boxplot() +
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(
title = "Distribución de candidatos en las listas a Legislador(a)",
x = "Estado",
y = "Posición en la lista",
fill = "Género"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Filtrar por election_type_id = 21
election_21_data <- eanr2025 %>%
filter(election_type_id == 21) %>%
filter(cod_estado != 25)
# Filtrar por election_type_id = 21
election_21_data <- eanr2025 %>%
filter(election_type_id == 21) %>%
filter(cod_state != 25)
# 3. Crear los boxplots
ggplot(election_21_data, aes(x = state_description, y = list_order, fill = gender)) +
geom_boxplot() +
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(
title = "Distribución de candidatos en las listas a Legislador(a)",
x = "Estado",
y = "Posición en la lista",
fill = "Género"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Filtrar por election_type_id = 21
election_21_data <- eanr2025 %>%
filter(election_type_id == 21 && cod_state != 25)
# Filtrar por election_type_id = 21
election_21_data <- eanr2025 %>%
filter(election_type_id == 21 & cod_state != 25)
# 3. Crear los boxplots
ggplot(election_21_data, aes(x = state_description, y = list_order, fill = gender)) +
geom_boxplot() +
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(
title = "Distribución de candidatos en las listas a Legislador(a)",
x = "Estado",
y = "Posición en la lista",
fill = "Género"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(election.type.21)
# Filtrar por election_type_id = 21
election_21_data <- eanr2025 %>%
filter(election_type_id == 21 & cod_state != 27)
# 3. Crear los boxplots
ggplot(election_21_data, aes(x = state_description, y = list_order, fill = gender)) +
geom_boxplot() +
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(
title = "Distribución de candidatos en las listas a Legislador(a)",
x = "Estado",
y = "Posición en la lista",
fill = "Género"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Filtrar por election_type_id = 21
election_21_nat_data <- eanr2025 %>%
filter(election_type_id == 21 & cod_state == 27)
# 3. Crear los boxplots
ggplot(election_21_nat_data, aes(x = organization_short_name, y = list_order, fill = gender)) +
geom_boxplot() +
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(
title = "Distribución de candidatos en las listas a Legislador(a)",
x = "Estado",
y = "Posición en la lista",
fill = "Género"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 3. Crear los boxplots
ggplot(election_21_nat_data, aes(x = organization_short_name, y = list_order, fill = gender)) +
geom_boxplot() +
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(
title = "Distribución de candidatos en las listas a Legislador(a)",
x = "Estado",
y = "Posición en la lista",
fill = "Género"
) +
theme_minimal() +
+
scale_x_discrete(labels = c("LÁPIZ", "AREPA", "BR", "ALIANZA DEMOCRÁTICA", "DDP", "FV, MIN y MOVEV", "SPV", "UNE", "VZLA ES LA RAZÓN", "GPP")) + # Cambiar etiquetas del eje x
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(election_21_nat_data, aes(x = organization_short_name, y = list_order, fill = gender)) +
geom_boxplot() +
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(
title = "Distribución de candidatos en las listas a Legislador(a)",
x = "Estado",
y = "Posición en la lista",
fill = "Género"
) +
theme_minimal() +
scale_x_discrete(labels = c("LÁPIZ", "AREPA", "BR", "ALIANZA DEMOCRÁTICA", "DDP", "FV, MIN y MOVEV", "SPV", "UNE", "VZLA ES LA RAZÓN", "GPP")) + # Cambiar etiquetas del eje x
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 3. Crear los boxplots
ggplot(election_21_nat_data, aes(x = organization_short_name, y = list_order, fill = gender)) +
geom_boxplot() +
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(
title = "Distribución de candidatos en las listas a Legislador(a)",
x = "Estado",
y = "Posición en la lista",
fill = "Género"
) +
theme_minimal() +
scale_x_discrete(labels = c("LÁPIZ", "AREPA", "BR", "ALIANZA DEMOCRÁTICA", "DDP", "FV, MIN y MOVEV", "SPV", "UNE", "UNT y UNICA", "GPP")) + # Cambiar etiquetas del eje x
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(election_21_nat_data, aes(x = organization_short_name, y = list_order, fill = gender)) +
geom_boxplot() +
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(
title = "Distribución de candidatos en las listas nacionales para elegir Diputados(as)",
x = "Estado",
y = "Posición en la lista",
fill = "Género"
) +
theme_minimal() +
scale_x_discrete(labels = c("LÁPIZ", "AREPA", "BR", "ALIANZA DEMOCRÁTICA", "DDP", "FV, MIN y MOVEV", "SPV", "UNE", "UNT y UNICA", "GPP")) + # Cambiar etiquetas del eje x
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(election_21_nat_data, aes(x = organization_short_name, y = list_order, fill = gender)) +
geom_boxplot() +
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(
title = "Distribución de candidatos en las listas nacionales para elegir Diputados(as)",
x = "Partido o Alianza",
y = "Posición en la lista",
fill = "Género"
) +
theme_minimal() +
scale_x_discrete(labels = c("LÁPIZ", "AREPA", "BR", "ALIANZA DEMOCRÁTICA", "DDP", "FV, MIN y MOVEV", "SPV", "UNE", "UNT y UNICA", "GPP")) + # Cambiar etiquetas del eje x
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(election_21_nat_data, aes(x = organization_short_name, y = list_order, fill = gender)) +
geom_boxplot() +
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(
title = "Distribución de candidatos en las listas nacionales para elegir Diputados(as)",
x = "Partido o Alianza",
y = "Posición en la lista",
fill = "Género"
) +
theme_minimal() +
scale_x_discrete(labels = c("LÁPIZ", "AREPA", "BR", "CONDE", "ALIANZA DEMOCRÁTICA", "DDP", "FV, MIN y MOVEV", "SPV", "UNE", "UNT y UNICA", "GPP")) + # Cambiar etiquetas del eje x
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(election.type.2)
View(election.type.2)
ggplot(election_21_data, aes(x = state_description, y = list_order, fill = gender)) +
geom_boxplot() +
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(
title = "Distribución de candidatos en las listas a Diputado(a)",
x = "Estado",
y = "Posición en la lista",
fill = "Género"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Cargando los datos
eanr2025 <- read.csv("dataset_eanr2025_candidatos.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE, encoding = "UTF-8")
# 1. Limpiar la columna state_description eliminando "EDO. "
eanr2025 <- eanr2025 %>%
mutate(state_description = gsub("EDO. ", "", state_description))
library(dplyr)
library(tidyr)
library(ggplot2)
library(purrr)
# Cargando los datos
eanr2025 <- read.csv("dataset_eanr2025_candidatos.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE, encoding = "UTF-8")
# 1. Limpiar la columna state_description eliminando "EDO. "
eanr2025 <- eanr2025 %>%
mutate(state_description = gsub("EDO. ", "", state_description))
eanr2025 <- eanr2025 %>%
mutate(state_description = gsub("BOLIVARIANO DE ", "", state_description))
eanr2025 <- eanr2025 %>%
mutate(state_description = gsub("DISTRITO ", "DTTO ", state_description))
eanr2025 <- eanr2025 %>%
mutate(state_description = gsub("AMAC", "AMACURO", state_description))
# 2. Filtrar por election_type_id = 2
election_2_data <- eanr2025 %>%
filter(election_type_id == 2)
# 3. Contar candidatos por estado, género y list_order
conteo_candidatos <- election_2_data %>%
group_by(state_description, gender, list_order) %>%
summarise(cantidad = n(), .groups = 'drop') %>%
group_by(state_description) %>%
mutate(porcentaje = cantidad / sum(cantidad) * 100) %>%
ungroup()
# 4. Preparar los datos para el gráfico (opcional, pero recomendado para ggplot2)
#  En este caso, los datos ya están en un formato adecuado para graficar barras apiladas o agrupadas.
# 5.  Crear el gráfico de barras
ggplot(conteo_candidatos, aes(x = state_description, y = porcentaje, fill = gender)) +
geom_bar(stat = "identity", position = "stack") + # o "stack" para barras apiladas
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(
title = "Porcentaje de Género por Estado para la elección a Gobernador(a)",
x = "",
y = "Porcentaje",
fill = "Género"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Guardar el gráfico (opcional)
# ggsave("gender_percentage_by_state_election_type_2.png", width = 12, height = 8)
